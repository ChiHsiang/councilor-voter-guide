# -*- coding: utf-8 -*-
import re
import urllib
from urlparse import urljoin
import scrapy
from scrapy.http import Request, FormRequest
from scrapy.selector import Selector
from kcc.items import Councilor


def ROC2AD(text):
    matchTerm = re.search(u'''
        (?P<year>[\d]+)[\s]*(?:年|[-/.])[\s]*
        (?P<month>[\d]+)[\s]*(?:月|[-/.])[\s]*
        (?P<day>[\d]+)
    ''', text, re.X)
    if matchTerm:
        return '%04d-%02d-%02d' % (int(matchTerm.group('year'))+1911, int(matchTerm.group('month')), int(matchTerm.group('day')))
    else:
        return None

class Spider(scrapy.Spider):
    name = "councilors_terms"
    allowed_domains = ["www.kcc.gov.tw"]
    start_urls = ["http://www.kcc.gov.tw/PeriodMembers/Search.aspx",]
    download_delay = 0.5

    def start_requests(self):
        payload = {
            '__EVENTTARGET':'ctl00$ContentPlaceHolder1$ddlPeriodTerms',
            '__EVENTARGUMENT':'',
            '__LASTFOCUS':'',
            '__VIEWSTATE':u'',
            'ctl00$txtSearch':u'全文檢索',
            'ctl00$hidSelectNode':u'1287/1293',
            'ctl00$ContentPlaceHolder1$ddlPeriod':'7',
            'ctl00$ContentPlaceHolder1$ddlPeriodTerms':'36',
            'ctl00$ContentPlaceHolder1$txtName':u'姓名及關鍵字',
            'ctl00$ContentPlaceHolder1$hidName':'',
            'ctl00$ContentPlaceHolder1$btnSearch.x':'33',
            'ctl00$ContentPlaceHolder1$btnSearch.y':'14'
        }
        return [FormRequest("http://www.kcc.gov.tw/PeriodMembers/Search.aspx", formdata=payload, callback=self.parse)]

    def parse(self, response):
        sel = Selector(response)
        nodes = sel.xpath('//table/tr/td/span/a[contains(@href, "Introduction.aspx?KeyID")]')
        for node in nodes:
            yield Request('http://www.kcc.gov.tw/PeriodMembers/%s' % node.xpath('@href').extract()[0], callback=self.parse_profile)

    def parse_profile(self, response):
        sel = Selector(response)
        item = Councilor()
        item['election_year'] = '2010'
        item['county'] = '高雄市'
        image = sel.xpath('//div/img[@id="ContentPlaceHolder1_lv_Pic_0"]/@src').extract()[0]
        item['image'] = urljoin(response.url, urllib.quote(image.encode('utf8')))
        header = sel.xpath('//div[@class="info_data"]/table/tr/td/h4/text()').re(u'(.*?)(議員|副議長|議長)')
        item['name'] = re.sub(u'\(.*\)', '', header[0])
        item['title'] = header[1]
        item['in_office'] = True
        item['term_start'] = '%s-12-25' % item['election_year']
        item['term_end'] = {'date': '2014-12-25'}
        item['contact_details'] = []
        item['links'] = [{'url': response.url, 'note': u'議會個人官網'}]
        nodes = sel.xpath('//table/tr/td')
        for node in nodes:
            th = node.xpath('preceding-sibling::th[1]/text()').extract()
            if th:
                th = re.sub(u'[\s:　]', '', th[0])
            else:
                continue
            if re.search(u'性別', th):
                item['gender'] = node.xpath('text()').extract()[0]
            if re.search(u'所屬政黨', th):
                item['party'] = node.xpath('table/tr/td/text()').extract()[0]
            if re.search(u'聯絡電話', th):
                for phone in [re.sub(u'\s', '', x) for x in node.xpath('text()').extract()]:
                    item['contact_details'].append({'type': 'voice', 'label': u'電話', 'value': phone})
            if re.search(u'傳真電話', th):
                for phone in [re.sub(u'\s', '', x) for x in node.xpath('text()').extract()]:
                    item['contact_details'].append({'type': 'fax', 'label': u'傳真', 'value': phone})
            if re.search(u'電子郵件', th):
                for email in [re.sub(u'\s', '', x) for x in node.xpath('a/text()').extract()]:
                    item['contact_details'].append({'type': 'email', 'label': u'電子信箱', 'value': email})
            if re.search(u'通訊地址', th):
                for address in [re.sub(u'\s', '', x) for x in node.xpath('text()').extract()]:
                    item['contact_details'].append({'type': 'address', 'label': u'通訊處', 'value': address})
            if re.search(u'學歷', th):
                item['education'] = [re.sub(u'\s', '', x) for x in node.xpath('ul/text()').extract()]
            if re.search(u'經歷', th):
                item['experience'] = [re.sub(u'\s', '', x) for x in node.xpath('ul/text()').extract()]
            if re.search(u'備註', th):
                item['remark'] = node.xpath('span/font/text()').extract()
                if item['remark']:
                    item['term_end'] = {}
                    item['term_end']['date'] = ROC2AD(''.join(item['remark'])) or item['term_end']['date']
                    item['term_end']['reason'] = ''
                    item['in_office'] = False
            if re.search(u'服務政見', th):
                item['platform'] = [re.sub(u'\s', '', x) for x in node.xpath('ol/text()').extract()]
        return item
