!function(){"use strict";function t(){var t=void 0;return document.body.clientWidth&&(t=1*document.body.clientWidth),document.documentElement.clientWidth&&(t=1*document.documentElement.clientWidth),window.innerWidth&&(t=1*window.innerWidth),t}function e(t,e){function n(t){c="ready",device.mobile()||device.tablet()}function i(n){"1"==n.data&&(console.log("vdo:"+n.data),g.ga.GT("/video."+t,".btn.play-"+e))}function a(){r.stopVideo()}var o=document.createElement("script"),c="init";o.src="https://www.youtube.com/iframe_api";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(o,s);var r;this.get_state=function(){return c},this.onYouTubeIframeAPIReady=function(){r=new YT.Player(e,{height:"100%",width:"100%",videoId:t,playerVars:{autoplay:0,rel:0,showinfo:0},events:{onReady:n,onStateChange:i}})},this.stop=function(){a()},this.play=function(){r.playVideo()},this.loadvdo=function(t){r.loadVideoById(t),r.stopVideo()}}function n(){function t(t){FB.api("/me",function(e){u=e.id,d=e.name,g.fbid=u,g.fbname=d,t&&t()})}function e(e,n){"connected"===n.status&&(t(e),l="in")}function n(e,n){$(".loading").hide(),"connected"===n.status?(t("in"!==l?e:e),l="in"):l="out"}function i(t){FB.getLoginStatus(function(n){e(t,n)})}function a(t){FB.getLoginStatus(function(e){n(t,e)})}function o(t){navigator.userAgent.indexOf("Safari"),navigator.userAgent.indexOf("Chrome");if(window.navigator.userAgent.toLowerCase().indexOf("line")<0)FB.login(function(e){a(t)},{scope:r});else{var e=g.host+"m/share.html",n="{uid="+g.uid+"}";location.href="https://www.facebook.com/v3.0/dialog/oauth?client_id="+g.fbAppId+"&redirect_uri="+e+"&state="+n}}function c(t,e,n,i){var a=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],arguments[5]);navigator.userAgent.indexOf("Safari"),navigator.userAgent.indexOf("Chrome");window.navigator.userAgent.toLowerCase().indexOf("line")<0?FB.ui({method:"feed",caption:t,link:i},function(t){a&&a(),t&&t.post_id?g.isSHARE=1:g.isSHARE=0}):location.href="https://www.facebook.com/dialog/feed?app_id="+g.fbAppId+"&display=popup&amp;caption="+t+"&link="+i+"&redirect_uri="+g.host}var s=this,r="public_profile,email,user_friends",l="init",u="0",d="DEFAULT",h=void 0;!function(t,e,n){var i,a=t.getElementsByTagName(e)[0];t.getElementById(n)||(i=t.createElement(e),i.id=n,i.src="https://connect.facebook.net/zh_TW/sdk.js",a.parentNode.insertBefore(i,a))}(document,"script","facebook-jssdk");this.get_FBID=function(){return u},this.get_FBNAME=function(){return d},this.get_state=function(){return l},this.get_ui_post=function(t,e,n,i){c(t,e,n,i,arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,arguments[5])},this.get_login=function(t){o(t)},this.get_checkLoginState=function(t){i(t)},this.initialize=function(t){console.log("fb app start:"+g.fbAppId+"....."),h=t},window.fbAsyncInit=function(){FB.init({appId:g.fbAppId,xfbml:!0,version:"v3.0"}),FB.AppEvents.logPageView(),s.get_checkLoginState(null)}}function i(t){t.find("a").length>=10&&t.slick({dots:!1,infinite:!1,speed:700,slidesToShow:10,slidesToScroll:1,responsive:[{breakpoint:1e3,settings:{slidesToShow:6,slidesToScroll:1,infinite:!1}},{breakpoint:567,settings:{slidesToShow:3,slidesToScroll:3,infinite:!1}}]})}function a(){function e(){var n=Number(t()),i=Number($(".head-j").width()),a=g.mousex-n/2;a>0?($(".hover-area .tri").css("left","75%"),$(".hover-area").css("left",a+i/2-90)):($(".hover-area .tri").css("left","20px"),$(".hover-area").css("left",a+i/2)),requestAnimationFrame(e)}!function(){$("body").mousemove(function(t){t.clientX,t.clientY,g.mousex=t.clientX}),e()}()}function o(t){t.find("a").length>=10&&t.slick({dots:!1,infinite:!1,speed:700,slidesToShow:10,slidesToScroll:1,responsive:[{breakpoint:1e3,settings:{slidesToShow:6,slidesToScroll:1,infinite:!1}},{breakpoint:567,settings:{slidesToShow:3,slidesToScroll:3,infinite:!1}}]})}function c(){function e(){var n=Number(t()),i=Number($(".head-j").width()),a=g.mousex-n/2;a>0?($(".hover-area .tri").css("left","75%"),$(".hover-area").css("left",a+i/2-90)):($(".hover-area .tri").css("left","20px"),$(".hover-area").css("left",a+i/2)),requestAnimationFrame(e)}!function(){$("body").mousemove(function(t){t.clientX,t.clientY,g.mousex=t.clientX}),e()}()}function s(){function t(t){var e=window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),n=void 0,a=$("nav").height()+20;n=$("#"+t).offset().top,e.animate({scrollTop:n-a},700),i(t)}function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"game";if(console.log("showPop:"+t),"game"==t)$(".btn-qa-kv").trigger("click");else{var e=t.replace("result","");console.log("result:"+e),$("#result"+e+"_pop").trigger("click"),g.ga.GT("/bot-web",".pv."+t,"")}}function n(){function n(t){var e=$(".navbar .bg-cover"),n=parseInt($("#navbar").css("height","auto").height());"collapse"==t?($("#navbar").css("height",0),$(".navbar-menu").attr("data-toggle","expand"),$("#navbar").animate({height:n},300),TweenMax.to(e,.5,{opacity:1,ease:Expo.easeOut})):($("#navbar").animate({height:0},300),$(".navbar-menu").attr("data-toggle","collapse"),$(window).scrollTop()<60&&TweenMax.to(e,.5,{delay:.2,opacity:0,ease:Expo.easeOut}))}$(".navbar-search").hover(function(){if(TweenMax.to($(this).find("input"),.5,{width:100}),"collapse"!=$(".navbar-menu").attr("data-toggle")){var t=$(".navbar .bg-cover");$("#navbar").animate({height:0},300),$(".navbar-menu").attr("data-toggle","collapse"),$(window).scrollTop()<60&&TweenMax.to(t,.5,{delay:.2,opacity:0,ease:Expo.easeOut})}},function(){TweenMax.to($(this).find("input"),.5,{width:1})}),$(".navbar-menu").click(function(){n($(this).attr("data-toggle"))}),$("a.hash").each(function(){console.log("hash"),$(this).click(function(n){n.preventDefault();var i=$(this).data("ga"),a=$(this).attr("href"),o=$.param.fragment(a).split("/")[1];if(console.log("hash "+o),$("#"+o).parents("html").length>0){var c=$(".navbar-toggle");switch("true"==c.attr("aria-expanded")&&c.trigger("click"),g.ga.GT($(this).parent().hasClass("banner")?"/nav-banner":"/nav",".btn."+i,""),i){case"game":1!=g.started&&e(o);break;case"promo":case"blogger":t(i);break;case"trial":sendTrackParam("JYfp037zYK7Q","btn A","","","","","","","","","","",""),t(i)}}else g.ga.GT($(this).parent().hasClass("banner")?"/nav-banner":"/nav",".btn."+i,""),$(this).parent().hasClass("banner")&&("trial"==i?(sendTrackParam("JYfp037zYK7Q","","btn B","","","","","","","","","",""),findoutRedeemNow()):findoutPetCombination()),setTimeout(function(){location.href=a},300);return!1})}),$("nav ul li ").each(function(){$(this).hover(function(){TweenMax.to($(this).find(".line"),.5,{opacity:1,scaleX:1,transformOrigin:"0% 0%",ease:Cubic.easeOut})},function(){$(this).hasClass("act")||TweenMax.to($(this).find(".line"),.5,{opacity:0,scaleX:0,transformOrigin:"0% 0%",ease:Cubic.easeIn})})})}function i(t){r=t,$("nav #navbar > ul > li ").each(function(){var t=$(this).data("ga");r==t?$(this).addClass("act"):($(this).removeClass("act"),TweenMax.to($(this).find(".line"),.5,{opacity:0,scaleX:0,transformOrigin:"0% 0%",ease:Cubic.easeOut}))})}function a(t,e,n){clearTimeout(l)}function o(){function t(t,e,n,i,a){a.preventDefault(),"disable"==n?alert("敬請期待!"):"_blank"===t?"tvc"==i?($(".pop-tvc").fadeIn("fast"),TweenMax.to($(".banner"),.5,{x:140,ease:Cubic.easeOut})):window.open(e,t):setTimeout(function(){window.open(e,"_self")},300)}$("nav li ").not(".hash").each(function(){$(this).hover(function(){var t=$(this).data("id");t!=r&&a($(this),t,"act")},function(){var t=$(this).data("id");t!=r&&a($(this),t,"dis")}),$(this).find(".tracklink").click(function(e){var n=$(this).attr("target"),i=$(this).attr("href"),a=$(this).data("act"),o=$(this).data("ga");return g.ga.GT("/nav",".btn."+o,""),"tobuy"==o&&console.log("tobuy ...... media"),t(n,i,a,o,e),!1})}),$(".wrapper .tracklink").click(function(e){var n=$(this).attr("target"),i=$(this).attr("href"),a=$(this).data("act"),o=$(this).data("ga"),c=$("#page").val();if(g.ga.GT("/"+c,".btn."+o,""),"tobuy1"==o||"tobuy2"==o||"tobuy3"==o)switch(console.log("tobuy ......media"),o){case"tobuy1":momBuyEnergy();break;case"tobuy2":momBuyWaterMilk()}return t(n,i,a,o,e),!1}),$(".navbar-header").find(".tracklink").click(function(e){var n=$(this).attr("target"),i=$(this).attr("href"),a=$(this).data("act"),o=$(this).data("ga");return g.ga.GT("/nav",".btn."+o),t(n,i,a,o,e),!1})}function c(){var n=location.href,i=$.param.fragment(n);if(console.log("hash "+i),i)try{if($("#"+i).parents("html").length>0){if("game"==i||i.indexOf("result")>=0)return void e(i);setTimeout(function(){t(i)},1e3)}}catch(t){}}function s(){g.top>0?("on"!=u&&(TweenMax.killTweensOf($(".navbar >.container >.bg")),TweenMax.to($(".navbar >.container >.bg"),1,{opacity:1,ease:Expo.easeOut})),u="on"):("off"!=u&&(TweenMax.killTweensOf($(".navbar >.container >.bg")),TweenMax.to($(".navbar >.container >.bg"),1,{opacity:0,ease:Expo.easeOut})),u="off"),setTimeout(s,20)}var r=0,l=void 0,u="off";this.getupdateState=function(t){i(t)},this.init=function(){setTimeout(c,100),o(),n(),s()},this.init()}function r(){function t(){switch($("#page").val()){default:return new m,!0;case"county-mayor-area":return new b,!0;case"county-mayor":return new k,!0;case"resume":return new w,!0;case"councilmen-area":return new T,!0;case"councilmen-county":return new C,!0;case"councilmen":return new S,!0;case"seemore":return new E,!0;case"seemore-detail":return new H,!0;case"bill-area":return new O,!0;case"bill-county":return new x,!0;case"bill":return new M,!0;case"ballot":return new U,!0;case"wish-list":return new P,!0;case"wish":return new I,!0;case"wish-editor":return new j,!0}}var e=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)};window.requestAnimationFrame=e,function(){new p($("body img"),function(){N.menu=new s,t()&&$(".loading").fadeOut(500)})}(),console.log("app start.....")}var l=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},u=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),d=function t(e,n,i){null===e&&(e=Function.prototype);var a=Object.getOwnPropertyDescriptor(e,n);if(void 0===a){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,i)}if("value"in a)return a.value;var c=a.get;if(void 0!==c)return c.call(i)},h=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},f=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e};String.prototype.insert=function(t,e){return t>0?this.substring(0,t)+e+this.substring(t,this.length):e+this};var p=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;l(this,t),this.$imgs=e,this.imagesN=e.length,this.cb=n,this.c=0,this.count=0,this.oldInd=0,this.init()}return u(t,[{key:"reset",value:function(){}},{key:"anim",value:function(t){console.log("anim...............")}},{key:"pngFix",value:function(){var t=this;$(this).find('img[src$=".png"],img[src$=".gif"]').each(function(){console.log("png Fix!...."),t.style.filter="progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled='true',sizingMethod='image',src='"+t.src+"')"})}},{key:"init",value:function(){var t=this;this.reset(),this.$imgs.imagesLoaded().progress(function(e,n){t.count++;var i=Math.floor(t.count/t.$imgs.length*100);$(".loading .ld .txt").html(i);parseInt(i/11,10);t.oldInd=t.ind,t.count===t.$imgs.length&&(t.pngFix(),t.cb&&t.cb())})}}]),t}(),g={};g.TEST=0,g.host="./",g.mobile_root="./",g.api_root="./",g.gaId="",g.fbAppId="135077620505268",g.geo={"六都":{cities:[{cne:"臺北市",eng:"TPE"},{cne:"新北市",eng:"TPH"},{cne:"桃園市",eng:"TYC"},{cne:"臺中市",eng:"TXG"},{cne:"臺南市",eng:"TNN"},{cne:"高雄市",eng:"KHH"}]},"北部":{cities:[{cne:"臺北市",eng:"TPE"},{cne:"新北市",eng:"TPH"},{cne:"基隆市",eng:"KLU"},{cne:"桃園市",eng:"TYC"},{cne:"新竹市",eng:"HSC"},{cne:"新竹縣",eng:"HSH"}]},"中部":{cities:[{cne:"苗栗縣",eng:"MAL"},{cne:"臺中市",eng:"TXG"},{cne:"彰化縣",eng:"CWH"},{cne:"南投縣",eng:"NTO"},{cne:"雲林縣",eng:"YUN"}]},"南部":{cities:[{cne:"嘉義縣",eng:"CHY"},{cne:"嘉義市",eng:"CYI"},{cne:"臺南市",eng:"TNN"},{cne:"高雄市",eng:"KHH"},{cne:"屏東縣",eng:"IUH"}]},"東部":{cities:[{cne:"宜蘭縣",eng:"ILN"},{cne:"花蓮縣",eng:"HWA"},{cne:"臺東縣",eng:"TTT"}]},"離島":{cities:[{cne:"金門縣",eng:"KMN"},{cne:"連江縣",eng:"LNN"},{cne:"澎湖縣",eng:"PEH"}]}},g.allcities=[{cne:"臺北市",eng:"TPE"},{cne:"新北市",eng:"TPH"},{cne:"桃園市",eng:"TYC"},{cne:"臺中市",eng:"TXG"},{cne:"臺南市",eng:"TNN"},{cne:"高雄市",eng:"KHH"},{cne:"臺北市",eng:"TPE"},{cne:"新北市",eng:"TPH"},{cne:"基隆市",eng:"KLU"},{cne:"桃園市",eng:"TYC"},{cne:"新竹市",eng:"HSC"},{cne:"新竹縣",eng:"HSH"},{cne:"苗栗縣",eng:"MAL"},{cne:"苗栗市",eng:"MAC"},{cne:"臺中市",eng:"TXG"},{cne:"彰化縣",eng:"CWH"},{cne:"彰化市",eng:"CWS"},{cne:"南投市",eng:"NTC"},{cne:"南投縣",eng:"NTO"},{cne:"雲林縣",eng:"YUN"},{cne:"嘉義縣",eng:"CHY"},{cne:"嘉義市",eng:"CYI"},{cne:"臺南市",eng:"TNN"},{cne:"高雄市",eng:"KHH"},{cne:"屏東縣",eng:"IUH"},{cne:"屏東市",eng:"PTS"},{cne:"宜蘭縣",eng:"ILN"},{cne:"宜蘭市",eng:"ILC"},{cne:"花蓮縣",eng:"HWA"},{cne:"花蓮市",eng:"HWC"},{cne:"臺東市",eng:"TTC"},{cne:"臺東縣",eng:"TTT"},{cne:"金門縣",eng:"KMN"},{cne:"連江縣",eng:"LNN"},{cne:"澎湖縣",eng:"PEH"}];var v=function(){this.tags=["360-cors-upload"],this.categoryId=22,this.videoId="",this.uploadStartTime=0};v.prototype.ready=function(t){this.accessToken=t,this.gapi=gapi,this.authenticated=!0,this.gapi.client.request({path:"/youtube/v3/channels",params:{part:"snippet",mine:!0},callback:function(t){t.error?console.log(t.error.message):($("#channel-name").text(t.items[0].snippet.title),$("#channel-thumbnail").attr("src",t.items[0].snippet.thumbnails.default.url),$(".pre-sign-in").hide(),$(".post-sign-in").show())}.bind(this)}),$("#button").on("click",this.handleUploadClicked.bind(this))},v.prototype.uploadFile=function(t){var e={snippet:{title:$("#title").val(),description:$("#description").text(),tags:this.tags,categoryId:this.categoryId},status:{privacyStatus:$("#privacy-status option:selected").text()}},n=new MediaUploader({baseUrl:"https://www.googleapis.com/upload/youtube/v3/videos",file:t,token:this.accessToken,metadata:e,params:{part:Object.keys(e).join(",")},onError:function(t){var e=t;try{e=JSON.parse(t).error.message}finally{alert(e)}}.bind(this),onProgress:function(t){var e=Date.now(),n=t.loaded,i=t.total,a=(this.uploadStartTime,100*n/i);$("#upload-progress").attr({value:n,max:i}),$("#percent-transferred").text(a),$("#bytes-transferred").text(n),$("#total-bytes").text(i),$(".during-upload").show()}.bind(this),onComplete:function(t){var e=JSON.parse(t);this.videoId=e.id,$("#video-id").text(this.videoId),$(".post-upload").show(),this.pollForVideoStatus()}.bind(this)});this.uploadStartTime=Date.now(),n.upload()},v.prototype.handleUploadClicked=function(){$("#button").attr("disabled",!0),this.uploadFile($("#file").get(0).files[0])},v.prototype.pollForVideoStatus=function(){this.gapi.client.request({path:"/youtube/v3/videos",params:{part:"status,player",id:this.videoId},callback:function(t){if(t.error)console.log(t.error.message),setTimeout(this.pollForVideoStatus.bind(this),6e4);else{var e=t.items[0].status.uploadStatus;switch(e){case"uploaded":$("#post-upload-status").append("<li>Upload status: "+e+"</li>"),setTimeout(this.pollForVideoStatus.bind(this),6e4);break;case"processed":$("#player").append(t.items[0].player.embedHtml),$("#post-upload-status").append("<li>Final status.</li>");break;default:$("#post-upload-status").append("<li>Transcoding failed.</li>")}}}.bind(this)})};var y=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"index",n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];l(this,t),this.NAME=e,this.ifFB=n,this.ifYT=i,this.ifScrollHandle=a}return u(t,[{key:"bind",value:function(){console.log(this.NAME+" binding.....")}},{key:"init",value:function(){if(console.log(this.NAME+" initialing....."),this.ifFB&&console.log("page:"+this.NAME+" add fb ing....."),this.ifYT&&(console.log("page:"+this.NAME+" add youtube....."),this.YT=new e($(".yt").data("id"),"player"),onYouTubeIframeAPIReady=this.YT.onYouTubeIframeAPIReady),this.ifScrollHandle){var t=function(){var t=$("#page").val(),e=$(window).scrollTop(),n=$(".navbar .bg-cover"),i=$(".navbar-menu").attr("data-toggle");g.top=e,e>60||"expand"==i?TweenMax.to(n,.5,{opacity:1,ease:Expo.easeOut}):TweenMax.to(n,.5,{opacity:0,ease:Expo.easeOut}),"resume"==t&&"collapse"==i&&(e>60?(TweenMax.to($(".navbar"),.5,{top:-$(".navbar").height(),ease:Expo.easeOut}),TweenMax.to($(".wrapper-header"),.5,{top:0,ease:Expo.easeOut})):(TweenMax.to($(".navbar"),.5,{top:0,ease:Expo.easeOut}),TweenMax.to($(".wrapper-header"),.5,{top:$(".navbar").height(),ease:Expo.easeOut})))};window.onscroll=function(){t()},t()}location.href.indexOf("localhost")>=0&&(this.TEST=!0,console.log("run test mode......")),this.bind()}},{key:"onresize",value:function(t){$(window).resize(t)}}]),t}(),m=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"index",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));return o.TEST=!1,o.init(),o.watchScroll(),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this)}},{key:"anim",value:function(){}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){}}]),e}(y)),w=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"resume",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));return o.TEST=!1,o.init(),o.watchScroll(),o.slickTool(),o.updateView(),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this)}},{key:"updateView",value:function(){var t=$(".wrapper-header").data("type");$(".nav-resume-all  a").each(function(){$(this).data("type")==t&&$(this).addClass("act")}),$("nav.navbar , nav.navbar .bg-cover").addClass("bg-"+t)}},{key:"slickTool",value:function(){$(".nav-resume-all").on("init",function(){console.log("carousel3 has init...."),$(".nav-resume-all .slick-prev").html('<i class="fa fa-arrow-right"></i>'),$(".nav-resume-all .slick-next").html('<i class="fa fa-arrow-right"></i>')}),$(".nav-resume-all").slick({dots:!1,infinite:!1,speed:700,slidesToShow:5,slidesToScroll:1,responsive:[{breakpoint:767,settings:{slidesToShow:4,slidesToScroll:4,infinite:!1}},{breakpoint:567,settings:{slidesToShow:3,slidesToScroll:3,infinite:!1}}]})}},{key:"anim",value:function(){}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){}}]),e}(y)),b=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"county-mayer-area",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o}return h(e,t),u(e,[{key:"chkIgContainsHash",value:function(){var t=location.href,e=$.param.fragment(t);return e&&console.log("hash "+e),decodeURIComponent(e)}},{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this)}},{key:"datafetch",value:function(t){var e=this;console.log("data fetching...."),""==t&&(t="六都");var n=g.geo[t].cities;e.updateViewUi(t),e.updateView(n)}},{key:"updateViewUi",value:function(t){$(".select-area > a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),g.area=t}},{key:"updateView",value:function(t){var e=this;$(".select-county-blk").html("");for(var n in t)$(".select-county-blk").append('\n                <div class="col-xs-6 col-sm-3"><a class="info" href="/candidates/mayors/'+t[n].cne+"/#"+g.area+'">\n              <p>'+t[n].cne+'</p>\n              <p class="eng">'+t[n].eng+"</p></a></div>\n              ");e.anim()}},{key:"anim",value:function(){console.log("update View...");var t=0,e=30*Math.random(),n=Math.ceil(e);$(".select-county-blk > div ").each(function(){var e=(t+n)%30+1;$(this).find(".info").addClass("bg-light-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){var t=this;$(".select-area > a").click(function(){var e=$(this).data("id");t.datafetch(e)})}}]),e}(y)),k=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"county-mayer",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o.anim(),o}return h(e,t),u(e,[{key:"chkIgContainsHash",value:function(){var t=location.href,e=$.param.fragment(t);return e&&(console.log("hash "+e),g.area=e),decodeURIComponent(e)}},{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this)}},{key:"datafetch",value:function(t){var e=this;console.log("data fetching...."),""==t&&(t="六都");var n=g.geo[t].cities;e.updateViewUi(t),e.updateView(n),e.updateViewUiCounty(county_global)}},{key:"updateViewUi",value:function(t){$(".select-area > a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),g.area=t}},{key:"updateViewUiCounty",value:function(t){0==t&&(t=$(".select-county a:first").data("id")),$(".select-county  a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")})}},{key:"updateView",value:function(t){$(".select-county").html("");for(var e in t)$(".select-county").append('\n             <a href="'+prefixUrl_global+t[e].cne+"/#"+g.area+'" data-id="'+t[e].cne+'">'+t[e].cne+"</a>\n              ")}},{key:"anim",value:function(){var t=this;console.log("update View...");var e=0,n=30*Math.random(),i=Math.ceil(n);$(".content-list > .content-item ").each(function(){var t=(e+i)%30+1;$(this).addClass("bg-dark-group-color"+t),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*e,opacity:1,y:0,ease:Back.easeOut}),e++}),t.detailbind()}},{key:"watchScroll",value:function(){}},{key:"detailbind",value:function(){function t(t,e){var n=t.height(),i=t.css("height","auto").height();t.height(n),t.stop().animate({height:i},e)}var e={};$(".content-item").each(function(){var n=$(this).data("id");$(this).find(".content-detail ").css("height",0),e[n]=0,$(this).find(".btn-detail").click(function(){var i=$(this).parent().parent().parent(),a=(i.data("id"),i.find(".content-detail"));0==e[n]?(t(a,500),e[n]=1):(a.animate({height:"0"},500),e[n]=0)})})}},{key:"bind",value:function(){console.log("binding....");var t=this;$(".select-area > a").click(function(){var e=$(this).data("id");""==e&&(e="六都");var n=g.geo[e].cities;t.updateViewUi(e),t.updateView(n),t.updateViewUiCounty(0)})}}]),e}(y)),T=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"county-mayer-area",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this)}},{key:"chkIgContainsHash",value:function(){var t=location.href,e=$.param.fragment(t);return e&&console.log("hash "+e),decodeURIComponent(e)}},{key:"datafetch",value:function(){function t(t){g.geo[t]={cities:[]};var n=g.constituencies,i=$.grep(n,function(e){return"高山原住民"==t?e.district.indexOf("山地原住民")>=0:e.district.indexOf(t)>=0}),a=_.groupBy(i,function(t){return t.county});for(var o in a){console.log("norepeatcts ..."+o);var c=e(o);g.geo[t].cities.push({cne:o,eng:c})}}function e(t){var e=g.allcities;return $.grep(e,function(e){return e.cne.indexOf(t)>=0})[0].eng}var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都",i=(arguments.length>1&&void 0!==arguments[1]&&arguments[1],this);year_global&&year_global,$.get(jsonUrl_global,function(e){if(e){g.constituencies=e,t("高山原住民"),t("平地原住民"),""==n&&(n="六都");var a=g.geo[n].cities;i.updateViewUi(n),i.updateView(a,"city")}else alert("出現錯誤，請稍後再試！")},"json")}},{key:"updateViewUi",value:function(t){$(".select-area > a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")})}},{key:"updateView",value:function(t,e){var n=this;$(".select-county-blk").html("");var i=n.chkIgContainsHash();if("city"==e)for(var a in t)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3"><a class="info" href="/candidates/councilors/'+t[a].cne+"/#"+i+'">\n                  <p>'+t[a].cne+'</p>\n                  <p class="eng">'+t[a].eng+"</p></a>\n                  </div>\n                  ");else for(var o in t)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3">\n                  <a class="info councilmen-area" href="/candidates/councilors/'+t[o].cne+"/#"+i+'">\n                  <p></p>\n                  <p class="eng">01</p>\n                  <div class="area-info">桃源區、那瑪夏區、甲\n                    仙區、六龜區、杉林區\n                    、內門區、旗山區、美\n                    濃區、茂林區 </div>\n                  </a>\n                  \n                  </div>\n                  ');n.anim()}},{key:"anim",value:function(){console.log("update View...");var t=0,e=30*Math.random(),n=Math.ceil(e);$(".select-county-blk > div ").each(function(){var e=(t+n)%30+1;$(this).find(".info").addClass("bg-light-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){var t=this;$(".select-area > a").click(function(){var e=$(this).data("id");t.datafetch(e)})}}]),e}(y)),C=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"councilmen county",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this)}},{key:"chkIgContainsHash",value:function(){var t=location.href,e=$.param.fragment(t);return e&&console.log("hash "+e),decodeURIComponent(e)}},{key:"datafetch",value:function(t,e){function n(t){g.geo[t]={cities:[]};var e=g.constituencies,n=$.grep(e,function(e){return"高山原住民"==t?e.district.indexOf("山地原住民")>=0:e.district.indexOf(t)>=0}),a=_.groupBy(n,function(t){return t.county});for(var o in a){console.log("norepeatcts ..."+o);var c=i(o);g.geo[t].cities.push({cne:o,eng:c})}}function i(t){var e=g.allcities;return $.grep(e,function(e){return e.cne.indexOf(t)>=0})[0].eng}var a=this;!function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都";arguments.length>1&&void 0!==arguments[1]&&arguments[1],year_global&&year_global,$.get(jsonUrl_global,function(e){if(e){g.constituencies=e,n("高山原住民"),n("平地原住民"),""==t&&(t="六都");var i=g.geo[t].cities;a.updateViewUi(t),a.updateView(i,"city");var o=a.updateViewUiCounty(county_global);a.updateViewCounty(o)}else alert("出現錯誤，請稍後再試！")},"json")}(t,e)}},{key:"updateViewUi",value:function(t){$(".select-area > a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),g.area=t}},{key:"updateViewUiCounty",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return 0==t&&(t=$(".select-county a:first").data("id")),g.county=t,$(".select-county a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),t}},{key:"updateView",value:function(t,e){var n=this;$(".select-county  a").length>=10&&$(".select-county").slick("unslick"),$(".select-county").html("");for(var i in t)$(".select-county").append('\n             <a href="#'+g.area+'" data-id="'+t[i].cne+'">'+t[i].cne+"</a>\n              ");n.bindcounty(),$(".select-county  a").length>=10&&$(".select-county").slick({dots:!1,infinite:!1,speed:700,slidesToShow:10,slidesToScroll:1,responsive:[{breakpoint:1e3,settings:{slidesToShow:6,slidesToScroll:1,infinite:!1}},{breakpoint:567,settings:{slidesToShow:3,slidesToScroll:3,infinite:!1}}]})}},{key:"updateViewCounty",value:function(t){var e=this,n=void 0;if(g.area.indexOf("原住民")<0){var i=g.constituencies;n=$.grep(i,function(e){return e.county.indexOf(t)>=0})}else{var a=g.constituencies,o="高山原住民"==g.area?"山地原住民":g.area;n=$.grep(a,function(e){return e.county.indexOf(t)>=0&&e.district.indexOf(o)>=0})}$(".select-county-blk").html("");for(var c in n)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3">\n                  <a class="info councilmen-area" href="/candidates/councilors/'+n[c].county+"/"+n[c].constituency+"/#"+g.area+'">\n                  <p></p>\n                  <p class="eng">'+n[c].constituency+'</p>\n                  <div class="area-info">\n                    <div class="areas">\n                    '+n[c].district+"\n                    </div>\n                  </div>\n                  </a>\n                  \n                  </div>\n                  ");e.anim()}},{key:"anim",value:function(){console.log("update View...");var t=0,e=30*Math.random(),n=Math.ceil(e);$(".select-county-blk > div ").each(function(){var e=(t+n)%30+1;$(this).find(".info").addClass("bg-light-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++;var i=$(this).find(".area-info").height(),a=$(this).find(".area-info .areas").height();if(console.log("boxh..."+i),console.log("contenth..."+a),i<a){TweenMax.fromTo($(this).find(".area-info .areas"),8,{y:i},{delay:0*t,y:-a,repeat:-1,ease:Linear.easeNone})}})}},{key:"watchScroll",value:function(){}},{key:"bindcounty",value:function(){var t=this;$(".select-county > a").off("click").click(function(){var e=$(this).data("id");console.log("id..."+e)
;var n=t.updateViewUiCounty(e);t.updateViewCounty(n)})}},{key:"bind",value:function(){var t=this;$(".select-area a").click(function(){var e=$(this).data("id");""==e&&(e="六都");var n=g.geo[e].cities;t.updateViewUi(e),t.updateView(n,"city");var i=t.updateViewUiCounty(0);t.updateViewCounty(i)})}}]),e}(y)),S=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"councilmen",i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],a=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var c=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,i,a,o));c.TEST=!1,c.fb=new n,c.init(),c.watchScroll();var s=c.chkIgContainsHash();return c.datafetch(s),c}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),new a}},{key:"chkIgContainsHash",value:function(){var t=location.href,e=$.param.fragment(t);return e&&console.log("hash "+e),decodeURIComponent(e)}},{key:"datafetch",value:function(t,e){function n(t){g.geo[t]={cities:[]};var e=g.constituencies,n=$.grep(e,function(e){return"高山原住民"==t?e.district.indexOf("山地原住民")>=0:e.district.indexOf(t)>=0}),a=_.groupBy(n,function(t){return t.county});for(var o in a){console.log("norepeatcts ..."+o);var c=i(o);g.geo[t].cities.push({cne:o,eng:c})}}function i(t){var e=g.allcities;return $.grep(e,function(e){return e.cne.indexOf(t)>=0})[0].eng}var a=this;!function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都";arguments.length>1&&void 0!==arguments[1]&&arguments[1],year_global&&year_global,$.get(jsonUrl_global,function(e){if(e){g.constituencies=e,n("高山原住民"),n("平地原住民"),console.log("area..."+t),console.log("GLOBAL.county..."+g.county),""==t&&(t="六都");var i=g.geo[t].cities;a.updateViewUi(t),a.updateView(i,"city");var o=a.updateViewUiCounty(county_global);a.updateViewCounty(o),a.updateViewUiConstituency(constituency_global)}else alert("出現錯誤，請稍後再試！")},"json")}(t,e)}},{key:"updateViewUi",value:function(t){$(".select-area > a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),g.area=t}},{key:"updateViewUiCounty",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return 0==t&&(t=$(".select-county a:first").data("id")),g.county=t,$(".select-county a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),t}},{key:"updateViewUiConstituency",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;0==t&&(t=$(".select-constituency a:first").data("id")),g.constituency=t,$(".select-constituency a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),this.anim()}},{key:"updateView",value:function(t,e){var n=this;$(".select-county  a").length>=10&&$(".select-county").slick("unslick"),$(".select-county").html("");for(var a in t)$(".select-county").append('\n             <a href="'+prefixUrl_global+t[a].cne+"/#"+g.area+'" data-id="'+t[a].cne+'">'+t[a].cne+"</a>\n              \n              ");n.bindcounty(),i($(".select-county"))}},{key:"updateViewCounty",value:function(t){var e=void 0;if(g.area.indexOf("原住民")<0){var n=g.constituencies;e=$.grep(n,function(e){return e.county.indexOf(t)>=0})}else{var a=g.constituencies,o="高山原住民"==g.area?"山地原住民":g.area;e=$.grep(a,function(e){return e.county.indexOf(t)>=0&&e.district.indexOf(o)>=0})}$(".select-constituency  a").length>=10&&$(".select-constituency").slick("unslick"),$(".select-constituency").html("");for(var c in e){var s=Number(e[c].constituency)<10?"0"+e[c].constituency+"區":e[c].constituency+"區";e[c].district;$(".select-constituency").append('\n                <a href="'+prefixUrl_global+t+"/"+e[c].constituency+"/#"+g.area+'" data-id="'+e[c].constituency+'" data-info="'+e[c].district+'">'+s+"\n                </a>\n                  ")}i($(".select-constituency")),$(".select-constituency a").each(function(){$(this).off("hover").hover(function(){var t=$(this).data("id"),e=$(this).data("info");console.log("hover...."+t),$(".hover-info p").html(""+e),$(".hover-info").show()},function(){$(".hover-info").hide()})})}},{key:"anim",value:function(){var t=this;console.log("update View...");var e=0,n=30*Math.random(),i=Math.ceil(n);$(".content-list > .content-item ").each(function(){var t=(e+i)%30+1;$(this).addClass("bg-dark-group-color"+t),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*e,opacity:1,y:0,ease:Back.easeOut}),e++}),t.detailbind()}},{key:"detailbind",value:function(){function t(t,e){var n=t.height(),i=t.css("height","auto").height();t.height(n),t.stop().animate({height:i},e)}var e={};$(".content-item").each(function(){var n=$(this).data("id");$(this).find(".content-detail ").css("height",0),e[n]=0,$(this).find(".btn-detail").click(function(){var i=$(this).parent().parent().parent(),a=(i.data("id"),i.find(".content-detail"));0==e[n]?(t(a,500),e[n]=1):(a.animate({height:"0"},500),e[n]=0)})})}},{key:"watchScroll",value:function(){}},{key:"bindcounty",value:function(){var t=this;$(".select-county > a").off("click").click(function(){var e=$(this).data("id");console.log("id..."+e);var n=t.updateViewUiCounty(e);t.updateViewCounty(n),t.updateViewUiConstituency(0)})}},{key:"bind",value:function(){var t=this;$(".select-area a").off("click").click(function(){var e=$(this).data("id");""==e&&(e="六都");var n=g.geo[e].cities;t.updateViewUi(e),t.updateView(n,"city");var i=t.updateViewUiCounty(0);t.updateViewCounty(i),t.updateViewUiConstituency(0)})}}]),e}(y)),O=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"county-mayer-area",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this)}},{key:"chkIgContainsHash",value:function(){var t=location.href,e=$.param.fragment(t);return e&&console.log("hash "+e),decodeURIComponent(e)}},{key:"datafetch",value:function(){function t(t){g.geo[t]={cities:[]};var n=g.constituencies,i=$.grep(n,function(e){return"高山原住民"==t?e.district.indexOf("山地原住民")>=0:e.district.indexOf(t)>=0}),a=_.groupBy(i,function(t){return t.county});for(var o in a){console.log("norepeatcts ..."+o);var c=e(o);g.geo[t].cities.push({cne:o,eng:c})}}function e(t){var e=g.allcities;return $.grep(e,function(e){return e.cne.indexOf(t)>=0})[0].eng}var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都",i=(arguments.length>1&&void 0!==arguments[1]&&arguments[1],this);$.get(jsonUrl_global,function(e){if(e){g.constituencies=e,t("高山原住民"),t("平地原住民"),t("不分區"),t("僑民"),""==n&&(n="六都");var a=g.geo[n].cities;i.updateViewUi(n),i.updateView(a,"city")}else alert("出現錯誤，請稍後再試！")},"json")}},{key:"updateViewUi",value:function(t){$(".select-area > a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")})}},{key:"updateView",value:function(t,e){var n=this;$(".select-county-blk").html("");var i=n.chkIgContainsHash();if("city"==e)for(var a in t)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3"><a class="info" href="'+prefixUrl_global+t[a].cne+"/#"+i+'">\n                  <p>'+t[a].cne+'</p>\n                  <p class="eng">'+t[a].eng+"</p></a>\n                  </div>\n                  ");else for(var o in t)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3">\n                  <a class="info councilmen-area" href="'+prefixUrl_global+t[o].cne+"/#"+i+'">\n                  <p></p>\n                  <p class="eng">01</p>\n                  <div class="area-info">桃源區、那瑪夏區、甲\n                    仙區、六龜區、杉林區\n                    、內門區、旗山區、美\n                    濃區、茂林區 </div>\n                  </a>\n                  \n                  </div>\n                  ');n.anim()}},{key:"anim",value:function(){console.log("update View...");var t=0,e=30*Math.random(),n=Math.ceil(e);$(".select-county-blk > div ").each(function(){var e=(t+n)%30+1;$(this).find(".info").addClass("bg-light-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){var t=this;$(".select-area > a").click(function(){var e=$(this).data("id");t.datafetch(e)})}}]),e}(y)),x=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"councilmen county",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this)}},{key:"chkIgContainsHash",value:function(){var t=location.href,e=$.param.fragment(t);return e&&console.log("hash "+e),decodeURIComponent(e)}},{key:"datafetch",value:function(t,e){function n(t){g.geo[t]={cities:[]};var e=g.constituencies,n=$.grep(e,function(e){return"高山原住民"==t?e.district.indexOf("山地原住民")>=0:e.district.indexOf(t)>=0}),a=_.groupBy(n,function(t){return t.county});for(var o in a){console.log("norepeatcts ..."+o);var c=i(o);g.geo[t].cities.push({cne:o,eng:c})}}function i(t){var e=g.allcities;return $.grep(e,function(e){return e.cne.indexOf(t)>=0})[0].eng}var a=this;!function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都";arguments.length>1&&void 0!==arguments[1]&&arguments[1],$.get(jsonUrl_global,function(e){if(e){g.constituencies=e,n("高山原住民"),n("平地原住民"),console.log("area..."+t),console.log("GLOBAL.county..."+g.county),""==t&&(t="六都");var i=g.geo[t].cities;a.updateViewUi(t),a.updateView(i,"city");var o=a.updateViewUiCounty(county_global);a.updateViewCounty(o)}else alert("出現錯誤，請稍後再試！")},"json")}(t,e)}},{key:"updateViewUi",value:function(t){$(".select-area > a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),g.area=t}},{key:"updateViewUiCounty",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return 0==t&&(t=$(".select-county a:first").data("id")),g.county=t,$(".select-county a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),t}},{key:"updateView",value:function(t,e){var n=this;$(".select-county  a").length>=10&&$(".select-county").slick("unslick"),$(".select-county").html("");for(var i in t)$(".select-county").append('\n             <a href="'+prefixUrl_global+"#"+g.area+'" data-id="'+t[i].cne+'">'+t[i].cne+"</a>\n              ");n.bindcounty(),$(".select-county  a").length>=10&&$(".select-county").slick({dots:!1,infinite:!1,speed:700,slidesToShow:10,slidesToScroll:1,responsive:[{breakpoint:1e3,settings:{slidesToShow:6,slidesToScroll:1,infinite:!1}},{breakpoint:567,settings:{slidesToShow:3,slidesToScroll:3,infinite:!1}}]})}},{key:"updateViewCounty",value:function(t){return}},{key:"anim",value:function(){console.log("update View...");var t=0,e=30*Math.random(),n=Math.ceil(e);$(".select-county-blk > div ").each(function(){var e=(t+n)%30+1;$(this).find(".info").addClass("bg-light-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++})}},{key:"watchScroll",value:function(){}},{key:"bindcounty",value:function(){var t=this;$(".select-county > a").off("click").click(function(){var e=$(this).data("id");console.log("id..."+e);var n=t.updateViewUiCounty(e);t.updateViewCounty(n)})}},{key:"bind",value:function(){var t=this;$(".select-area a").click(function(){var e=$(this).data("id");""==e&&(e="六都");var n=g.geo[e].cities;t.updateViewUi(e),t.updateView(n,"city");var i=t.updateViewUiCounty(0);t.updateViewCounty(i)})}}]),e}(y)),V=function(){function t(e){l(this,t),console.log("Arrows class contrusct..."),this._dom=e,this._Total=this._dom.find(".pg").length,this._curr=this._dom.find(".pg.act").data("id"),void 0===this._curr&&(this._curr=1),this.NumPerPage=10,this.chkPages=this.chkPages.bind(this),this.updateUIView=this.updateUIView.bind(this),this.updateView=this.updateView.bind(this),this.on=this.on.bind(this),this.init=this.init.bind(this),this.init()}return u(t,[{key:"init",value:function(){this.chkPages(),this.updateUIView(),this.updateView(),this.on()}},{key:"chkPages",value:function(){this.pgs=Math.ceil(this._curr/this.NumPerPage),this.maxPgs=Math.ceil(this._Total/this.NumPerPage),this.minpg=(this.pgs-1)*this.NumPerPage,this.maxpg=this.pgs*this.NumPerPage}},{key:"updateUIView",value:function(){this._dom.find(".pg"+this._curr).addClass("act"),this._dom.find(".btnNext,.btnPrev").show(),(this.pgs>=this.maxPgs||0==this.maxPgs)&&this._dom.find(".btnNext").hide(),this.pgs<=1&&this._dom.find(".btnPrev").hide()}},{key:"updateView",value:function(){this.removePage(this.minpg,this.maxpg),this.addPage(this.minpg,this.maxpg)}},{key:"hidePage",value:function(){}},{key:"addPage",value:function(t,e){for(var n=0,i=1;i<=this._Total;i++)i>t&&i<=e&&(this._dom.find(".pg"+i).css("opacity",0).show(),TweenMax.fromTo(this._dom.find(".pg"+i),.3,{y:5},{delay:.05*n,y:0,opacity:1}),n++)}},{key:"removePage",value:function(t,e){for(var n=1;n<=this._Total;n++)(n<=t||n>e)&&this._dom.find(".pg"+n).hide()}},{key:"on",value:function(){function t(){e.chkPages(),e.updateUIView(),e.updateView()}var e=this;this._dom.find(".btnNext").click(function(){e._curr=e.pgs*e.NumPerPage+1,t()}),this._dom.find(".btnPrev").click(function(){e._curr=(e.pgs-2)*e.NumPerPage+1,t()})}}]),t}(),M=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"councilmen",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),new c,new V($(".pagemanager"))}},{key:"chkIgContainsHash",value:function(){var t=location.href,e=$.param.fragment(t);return e&&console.log("hash "+e),decodeURIComponent(e)}},{key:"datafetch",value:function(t,e){function n(t){g.geo[t]={cities:[]};var e=g.constituencies,n=$.grep(e,function(e){return"高山原住民"==t?e.district.indexOf("山地原住民")>=0:e.district.indexOf(t)>=0}),a=_.groupBy(n,function(t){return t.county});for(var o in a){console.log("norepeatcts ..."+o);var c=i(o);g.geo[t].cities.push({cne:o,eng:c})}}function i(t){var e=g.allcities;return $.grep(e,function(e){return e.cne.indexOf(t)>=0})[0].eng}var a=this;!function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都";arguments.length>1&&void 0!==arguments[1]&&arguments[1],$.get(jsonUrl_global,function(e){if(e){g.constituencies=e,n("高山原住民"),n("平地原住民"),console.log("area..."+t),console.log("GLOBAL.county..."+g.county),""==t&&(t="六都");var i=g.geo[t].cities;a.updateViewUi(t),a.updateView(i,"city");var o=a.updateViewUiCounty(county_global);a.updateViewCounty(o),a.updateViewUiConstituency(constituency_global)}else alert("出現錯誤，請稍後再試！")},"json")}(t,e)}},{key:"updateViewUi",value:function(t){$(".select-area > a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),g.area=t}},{key:"updateViewUiCounty",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return 0==t&&(t=$(".select-county a:first").data("id")),g.county=t,$(".select-county a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),t}},{key:"updateViewUiConstituency",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;0==t&&(t=$(".select-constituency a:first").data("id")),g.constituency=t,$(".select-constituency a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")}),this.anim()}},{key:"updateView",value:function(t,e){var n=this;$(".select-county  a").length>=10&&$(".select-county").slick("unslick"),$(".select-county").html("");for(var i in t)$(".select-county").append('\n             <a href="'+prefixUrl_global+t[i].cne+"/#"+g.area+'" data-id="'+t[i].cne+'">'+t[i].cne+"</a>\n              \n              ");n.bindcounty(),o($(".select-county"))}},{key:"updateViewCounty",value:function(t){return}},{key:"anim",value:function(){var t=this;console.log("update View...");var e=0,n=30*Math.random(),i=Math.ceil(n);$(".content-list > .content-item ").each(function(){var t=(e+i)%30+1;console.log("add color..."),$(this).addClass("bg-dark-group-color"+t),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*e,opacity:1,y:0,ease:Back.easeOut}),e++}),t.detailbind()}},{key:"detailbind",value:function(){function t(t,e){var n=t.height(),i=t.css("height","auto").height();t.height(n),t.stop().animate({height:i},e)}var e={};$(".content-item").each(function(){var n=$(this).data("id");$(this).find(".content-detail ").css("height",0),e[n]=0,$(this).find(".btn-detail").click(function(){var i=$(this).parent().parent().parent(),a=(i.data("id"),i.find(".content-detail"));0==e[n]?(t(a,500),e[n]=1):(a.animate({height:"0"},500),e[n]=0)})})}},{key:"watchScroll",value:function(){}},{key:"bindcounty",value:function(){var t=this;$(".select-county > a").off("click").click(function(){var e=$(this).data("id");console.log("id..."+e);var n=t.updateViewUiCounty(e);t.updateViewCounty(n),t.updateViewUiConstituency(0)})}},{key:"bind",value:function(){var t=this,e=void 0;$(".select-area a").off("click").click(function(){var e=$(this).data("id");""==e&&(e="六都");var n=g.geo[e].cities;t.updateViewUi(e),t.updateView(n,"city");var i=t.updateViewUiCounty(0);t.updateViewCounty(i),t.updateViewUiConstituency(0)}),$(".filters > .f-item").each(function(){if($(this).hasClass("act")){var t=$(this).data("id");console.log("filters act id ..."+t),e=t}$(this).click(function(){var t=$(this).data("id");$(".filters > .f-item").removeClass("act"),t!=e&&(e=t,$(this).addClass("act"))})})}}]),e}(y)),U=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"ballot",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));return o.TEST=!1,o.init(),o.watchScroll(),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),this.anim(),new V($(".pagemanager"))}},{key:"anim",value:function(){console.log("update View...");var t=0,e=30*Math.random(),n=Math.ceil(e);$(".content-list > .content-item ").each(function(){var e=(t+n)%30+1;console.log("add color..."),$(this).addClass("bg-dark-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){var t=void 0;console.log("binding..........."),$(".filters > .f-item").each(function(){if($(this).hasClass("act")){var e=$(this).data("id");console.log("filters act id ..."+e),t=e}$(this).click(function(){var e=$(this).data("id");$(".filters > .f-item").removeClass("act"),e!=t&&(t=e,$(this).addClass("act"))})})}}]),e}(y)),P=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"wish list",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));return o.TEST=!1,o.init(),o.watchScroll(),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),this.anim()}},{key:"anim",value:function(){console.log("update View...");var t=0,e=30*Math.random(),n=Math.ceil(e);$(".content-list > .content-item ").each(function(){var e=(t+n)%30+1;console.log("add color..."),$(this).addClass("bg-dark-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){var t=void 0;console.log("binding..........."),$(".filters > .f-item").each(function(){if($(this).hasClass("act")){var e=$(this).data("id");console.log("filters act id ..."+e),t=e}$(this).click(function(){var e=$(this).data("id");$(".filters > .f-item").removeClass("act"),e!=t&&(t=e,$(this).addClass("act"))})}),$(".select-county-blk > div ").hover(function(){TweenMax.to($(this).find(".hover-info"),.3,{opacity:1})},function(){TweenMax.to($(this).find(".hover-info"),.3,{opacity:0})})}}]),e}(y)),I=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"wish",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));return o.TEST=!1,o.init(),o.watchScroll(),new V($(".pagemanager")),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),this.anim()}},{key:"anim",value:function(){console.log("update View...");var t=0,e=30*Math.random(),n=Math.ceil(e);$(".content-list > .content-item ").each(function(){var e=(t+n)%30+1;console.log("add color..."),$(this).find(".bg").addClass("bg-dark-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){var t=void 0;console.log("binding..........."),$(".filters > .f-item").each(function(){if($(this).hasClass("act")){var e=$(this).data("id");console.log("filters act id ..."+e),t=e}$(this).click(function(){var e=$(this).data("id");$(".filters > .f-item").removeClass("act"),e!=t&&(t=e,$(this).addClass("act"))})})}}]),e}(y)),j=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"wish editor",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));return o.TEST=!1,o.init(),o.watchScroll(),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),simplemde=new SimpleMDE({element:document.getElementById("simplemde")})}},{key:"anim",value:function(){}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){}}]),e}(y)),E=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"seemore",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));o.TEST=!1,o.init(),o.watchScroll();o.chkIgContainsHash();return o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),this.anim()}},{key:"chkIgContainsHash",value:function(){var t=location.href,e=$.param.fragment(t);return e&&console.log("hash "+e),decodeURIComponent(e)}},{key:"datafetch",value:function(){function t(t){g.geo[t]={cities:[]};var n=g.constituencies,i=$.grep(n,function(e){return"高山原住民"==t?e.district.indexOf("山地原住民")>=0:e.district.indexOf(t)>=0}),a=_.groupBy(i,function(t){return t.county});for(var o in a){console.log("norepeatcts ..."+o);var c=e(o);g.geo[t].cities.push({cne:o,eng:c})}}function e(t){var e=g.allcities;return $.grep(e,function(e){return e.cne.indexOf(t)>=0})[0].eng}var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都",i=(arguments.length>1&&void 0!==arguments[1]&&arguments[1],this);year_global&&year_global,$.get(jsonUrl_global,function(e){if(e){g.constituencies=e,t("高山原住民"),t("平地原住民"),""==n&&(n="六都");var a=g.geo[n].cities;i.updateViewUi(n),i.updateView(a,"city")}else alert("出現錯誤，請稍後再試！")},"json")}},{key:"updateViewUi",value:function(t){$(".select-area > a").each(function(){$(this).data("id")==t?$(this).addClass("act"):$(this).removeClass("act")})}},{key:"updateView",value:function(t,e){var n=this;if($(".select-county-blk").html(""),"city"==e)for(var i in t)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3"><a class="info" href="/candidates/councilors/'+t[i].cne+'">\n                  <p>'+t[i].cne+'</p>\n                  <p class="eng">'+t[i].eng+"</p></a>\n                  </div>\n                  ");else for(var a in t)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3">\n                  <a class="info councilmen-area" href="/candidates/councilors/'+t[a].cne+'">\n                  <p></p>\n                  <p class="eng">01</p>\n                  <div class="area-info">桃源區、那瑪夏區、甲\n                    仙區、六龜區、杉林區\n                    、內門區、旗山區、美\n                    濃區、茂林區 </div>\n                  </a>\n                  \n                  </div>\n                  ');n.anim()}},{key:"anim",value:function(){console.log("update View...");var t=0,e=30*Math.random(),n=Math.ceil(e);$(".select-county-blk > div ").each(function(){var e=(t+n)%30+1;$(this).find(".info").addClass("bg-light-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){$(".select-county-blk > div ").hover(function(){TweenMax.to($(this).find(".hover-info"),.3,{opacity:1})},function(){TweenMax.to($(this).find(".hover-info"),.3,{opacity:0})})}}]),e}(y)),H=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(t){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"see more detail",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];l(this,e);var o=f(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t,n,i,a));return o.TEST=!1,o.init(),o.watchScroll(),o}return h(e,t),u(e,[{key:"init",value:function(){d(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),$(".select-opt2").slick({dots:!1,infinite:!1,speed:700,slidesToShow:4,slidesToScroll:1,responsive:[{breakpoint:1e3,settings:{slidesToShow:3,slidesToScroll:1,infinite:!1}},{breakpoint:567,settings:{slidesToShow:2,slidesToScroll:3,infinite:!1}}]})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){}}]),e}(y)),N={};N.start=new r}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
