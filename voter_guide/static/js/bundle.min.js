!function(){"use strict";function e(){var e=void 0;return document.body.clientWidth&&(e=1*document.body.clientWidth),document.documentElement.clientWidth&&(e=1*document.documentElement.clientWidth),window.innerWidth&&(e=1*window.innerWidth),e}function t(e,t){function n(e){c="ready",device.mobile()||device.tablet()}function i(n){"1"==n.data&&(console.log("vdo:"+n.data),f.ga.GT("/video."+e,".btn.play-"+t))}function a(){r.stopVideo()}var o=document.createElement("script"),c="init";o.src="https://www.youtube.com/iframe_api";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(o,s);var r;this.get_state=function(){return c},this.onYouTubeIframeAPIReady=function(){r=new YT.Player(t,{height:"100%",width:"100%",videoId:e,playerVars:{autoplay:0,rel:0,showinfo:0},events:{onReady:n,onStateChange:i}})},this.stop=function(){a()},this.play=function(){r.playVideo()},this.loadvdo=function(e){r.loadVideoById(e),r.stopVideo()}}function n(){function e(e){FB.api("/me",function(t){u=t.id,d=t.name,f.fbid=u,f.fbname=d,e&&e()})}function t(t,n){"connected"===n.status&&(e(t),l="in")}function n(t,n){$(".loading").hide(),"connected"===n.status?(e("in"!==l?t:t),l="in"):l="out"}function i(e){FB.getLoginStatus(function(n){t(e,n)})}function a(e){FB.getLoginStatus(function(t){n(e,t)})}function o(e){navigator.userAgent.indexOf("Safari"),navigator.userAgent.indexOf("Chrome");if(window.navigator.userAgent.toLowerCase().indexOf("line")<0)FB.login(function(t){a(e)},{scope:r});else{var t=f.host+"m/share.html",n="{uid="+f.uid+"}";location.href="https://www.facebook.com/v3.0/dialog/oauth?client_id="+f.fbAppId+"&redirect_uri="+t+"&state="+n}}function c(e,t,n,i){var a=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],arguments[5]);navigator.userAgent.indexOf("Safari"),navigator.userAgent.indexOf("Chrome");window.navigator.userAgent.toLowerCase().indexOf("line")<0?FB.ui({method:"feed",caption:e,link:i},function(e){a&&a(),e&&e.post_id?f.isSHARE=1:f.isSHARE=0}):location.href="https://www.facebook.com/dialog/feed?app_id="+f.fbAppId+"&display=popup&amp;caption="+e+"&link="+i+"&redirect_uri="+f.host}var s=this,r="public_profile,email,user_friends",l="init",u="0",d="DEFAULT",h=void 0;!function(e,t,n){var i,a=e.getElementsByTagName(t)[0];e.getElementById(n)||(i=e.createElement(t),i.id=n,i.src="https://connect.facebook.net/zh_TW/sdk.js",a.parentNode.insertBefore(i,a))}(document,"script","facebook-jssdk");this.get_FBID=function(){return u},this.get_FBNAME=function(){return d},this.get_state=function(){return l},this.get_ui_post=function(e,t,n,i){c(e,t,n,i,arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,arguments[5])},this.get_login=function(e){o(e)},this.get_checkLoginState=function(e){i(e)},this.initialize=function(e){console.log("fb app start:"+f.fbAppId+"....."),h=e},window.fbAsyncInit=function(){FB.init({appId:f.fbAppId,xfbml:!0,version:"v3.0"}),FB.AppEvents.logPageView(),s.get_checkLoginState(null)}}function i(e){e.find("a").length>=10&&e.slick({dots:!1,infinite:!1,speed:700,slidesToShow:10,slidesToScroll:1,responsive:[{breakpoint:1e3,settings:{slidesToShow:6,slidesToScroll:1,infinite:!1}},{breakpoint:567,settings:{slidesToShow:3,slidesToScroll:3,infinite:!1}}]})}function a(){function t(){var n=Number(e()),i=Number($(".head-j").width()),a=f.mousex-n/2;a>0?($(".hover-area .tri").css("left","75%"),$(".hover-area").css("left",a+i/2-90)):($(".hover-area .tri").css("left","20px"),$(".hover-area").css("left",a+i/2)),requestAnimationFrame(t)}!function(){$("body").mousemove(function(e){e.clientX,e.clientY,f.mousex=e.clientX}),t()}()}function o(){function e(e){var t=window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),n=void 0,a=$("nav").height()+20;n=$("#"+e).offset().top,t.animate({scrollTop:n-a},700),i(e)}function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"game";if(console.log("showPop:"+e),"game"==e)$(".btn-qa-kv").trigger("click");else{var t=e.replace("result","");console.log("result:"+t),$("#result"+t+"_pop").trigger("click"),f.ga.GT("/bot-web",".pv."+e,"")}}function n(){function n(e){var t=$(".navbar .bg-cover"),n=parseInt($("#navbar").css("height","auto").height());"collapse"==e?($("#navbar").css("height",0),$(".navbar-menu").attr("data-toggle","expand"),$("#navbar").animate({height:n},300),TweenMax.to(t,.5,{opacity:1,ease:Expo.easeOut})):($("#navbar").animate({height:0},300),$(".navbar-menu").attr("data-toggle","collapse"),$(window).scrollTop()<60&&TweenMax.to(t,.5,{delay:.2,opacity:0,ease:Expo.easeOut}))}$(".navbar-search").hover(function(){if(TweenMax.to($(this).find("input"),.5,{width:100}),"collapse"!=$(".navbar-menu").attr("data-toggle")){var e=$(".navbar .bg-cover");$("#navbar").animate({height:0},300),$(".navbar-menu").attr("data-toggle","collapse"),$(window).scrollTop()<60&&TweenMax.to(e,.5,{delay:.2,opacity:0,ease:Expo.easeOut})}},function(){TweenMax.to($(this).find("input"),.5,{width:1})}),$(".navbar-menu").click(function(){n($(this).attr("data-toggle"))}),$("a.hash").each(function(){console.log("hash"),$(this).click(function(n){n.preventDefault();var i=$(this).data("ga"),a=$(this).attr("href"),o=$.param.fragment(a).split("/")[1];if(console.log("hash "+o),$("#"+o).parents("html").length>0){var c=$(".navbar-toggle");switch("true"==c.attr("aria-expanded")&&c.trigger("click"),f.ga.GT($(this).parent().hasClass("banner")?"/nav-banner":"/nav",".btn."+i,""),i){case"game":1!=f.started&&t(o);break;case"promo":case"blogger":e(i);break;case"trial":sendTrackParam("JYfp037zYK7Q","btn A","","","","","","","","","","",""),e(i)}}else f.ga.GT($(this).parent().hasClass("banner")?"/nav-banner":"/nav",".btn."+i,""),$(this).parent().hasClass("banner")&&("trial"==i?(sendTrackParam("JYfp037zYK7Q","","btn B","","","","","","","","","",""),findoutRedeemNow()):findoutPetCombination()),setTimeout(function(){location.href=a},300);return!1})}),$("nav ul li ").each(function(){$(this).hover(function(){TweenMax.to($(this).find(".line"),.5,{opacity:1,scaleX:1,transformOrigin:"0% 0%",ease:Cubic.easeOut})},function(){$(this).hasClass("act")||TweenMax.to($(this).find(".line"),.5,{opacity:0,scaleX:0,transformOrigin:"0% 0%",ease:Cubic.easeIn})})})}function i(e){r=e,$("nav #navbar > ul > li ").each(function(){var e=$(this).data("ga");r==e?$(this).addClass("act"):($(this).removeClass("act"),TweenMax.to($(this).find(".line"),.5,{opacity:0,scaleX:0,transformOrigin:"0% 0%",ease:Cubic.easeOut}))})}function a(e,t,n){clearTimeout(l)}function o(){function e(e,t,n,i,a){a.preventDefault(),"disable"==n?alert("敬請期待!"):"_blank"===e?"tvc"==i?($(".pop-tvc").fadeIn("fast"),TweenMax.to($(".banner"),.5,{x:140,ease:Cubic.easeOut})):window.open(t,e):setTimeout(function(){window.open(t,"_self")},300)}$("nav li ").not(".hash").each(function(){$(this).hover(function(){var e=$(this).data("id");e!=r&&a($(this),e,"act")},function(){var e=$(this).data("id");e!=r&&a($(this),e,"dis")}),$(this).find(".tracklink").click(function(t){var n=$(this).attr("target"),i=$(this).attr("href"),a=$(this).data("act"),o=$(this).data("ga");return f.ga.GT("/nav",".btn."+o,""),"tobuy"==o&&console.log("tobuy ...... media"),e(n,i,a,o,t),!1})}),$(".wrapper .tracklink").click(function(t){var n=$(this).attr("target"),i=$(this).attr("href"),a=$(this).data("act"),o=$(this).data("ga"),c=$("#page").val();if(f.ga.GT("/"+c,".btn."+o,""),"tobuy1"==o||"tobuy2"==o||"tobuy3"==o)switch(console.log("tobuy ......media"),o){case"tobuy1":momBuyEnergy();break;case"tobuy2":momBuyWaterMilk()}return e(n,i,a,o,t),!1}),$(".navbar-header").find(".tracklink").click(function(t){var n=$(this).attr("target"),i=$(this).attr("href"),a=$(this).data("act"),o=$(this).data("ga");return f.ga.GT("/nav",".btn."+o),e(n,i,a,o,t),!1})}function c(){var n=location.href,i=$.param.fragment(n);if(console.log("hash "+i),i)try{if($("#"+i).parents("html").length>0){if("game"==i||i.indexOf("result")>=0)return void t(i);setTimeout(function(){e(i)},1e3)}}catch(e){}}function s(){f.top>0?("on"!=u&&(TweenMax.killTweensOf($(".navbar >.container >.bg")),TweenMax.to($(".navbar >.container >.bg"),1,{opacity:1,ease:Expo.easeOut})),u="on"):("off"!=u&&(TweenMax.killTweensOf($(".navbar >.container >.bg")),TweenMax.to($(".navbar >.container >.bg"),1,{opacity:0,ease:Expo.easeOut})),u="off"),setTimeout(s,20)}var r=0,l=void 0,u="off";this.getupdateState=function(e){i(e)},this.init=function(){setTimeout(c,100),o(),n(),s()},this.init()}function c(){function e(){switch($("#page").val()){default:return new v,!0;case"county-mayor-area":return new m,!0;case"county-mayor":return new b,!0;case"resume":return new y,!0;case"councilmen-area":return new w,!0;case"councilmen-county":return new k,!0;case"councilmen":return new T,!0;case"seemore":return new C,!0;case"seemore-detail":return new S,!0}}var t=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)};window.requestAnimationFrame=t,function(){new h($("body img"),function(){O.menu=new o,e()&&$(".loading").fadeOut(500)})}(),console.log("app start.....")}var s=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),l=function e(t,n,i){null===t&&(t=Function.prototype);var a=Object.getOwnPropertyDescriptor(t,n);if(void 0===a){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,i)}if("value"in a)return a.value;var c=a.get;if(void 0!==c)return c.call(i)},u=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},d=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t};String.prototype.insert=function(e,t){return e>0?this.substring(0,e)+t+this.substring(e,this.length):t+this};var h=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;s(this,e),this.$imgs=t,this.imagesN=t.length,this.cb=n,this.c=0,this.count=0,this.oldInd=0,this.init()}return r(e,[{key:"reset",value:function(){}},{key:"anim",value:function(e){console.log("anim...............")}},{key:"pngFix",value:function(){var e=this;$(this).find('img[src$=".png"],img[src$=".gif"]').each(function(){console.log("png Fix!...."),e.style.filter="progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled='true',sizingMethod='image',src='"+e.src+"')"})}},{key:"init",value:function(){var e=this;this.reset(),this.$imgs.imagesLoaded().progress(function(t,n){e.count++;var i=Math.floor(e.count/e.$imgs.length*100);$(".loading .ld .txt").html(i);parseInt(i/11,10);e.oldInd=e.ind,e.count===e.$imgs.length&&(e.pngFix(),e.cb&&e.cb())})}}]),e}(),f={};f.TEST=0,f.host="./",f.mobile_root="./",f.api_root="./",f.gaId="",f.fbAppId="135077620505268",f.geo={"六都":{cities:[{cne:"臺北市",eng:"TPE"},{cne:"新北市",eng:"TPH"},{cne:"桃園市",eng:"TYC"},{cne:"臺中市",eng:"TXG"},{cne:"臺南市",eng:"TNN"},{cne:"高雄市",eng:"KHH"}]},"北部":{cities:[{cne:"臺北市",eng:"TPE"},{cne:"新北市",eng:"TPH"},{cne:"基隆市",eng:"KLU"},{cne:"桃園市",eng:"TYC"},{cne:"新竹市",eng:"HSC"},{cne:"新竹縣",eng:"HSH"}]},"中部":{cities:[{cne:"苗栗縣",eng:"MAL"},{cne:"臺中市",eng:"TXG"},{cne:"彰化縣",eng:"CWH"},{cne:"南投縣",eng:"NTO"},{cne:"雲林縣",eng:"YUN"}]},"南部":{cities:[{cne:"嘉義縣",eng:"CHY"},{cne:"嘉義市",eng:"CYI"},{cne:"臺南市",eng:"TNN"},{cne:"高雄市",eng:"KHH"},{cne:"屏東縣",eng:"IUH"}]},"東部":{cities:[{cne:"宜蘭縣",eng:"ILN"},{cne:"花蓮縣",eng:"HWA"},{cne:"臺東縣",eng:"TTT"}]},"離島":{cities:[{cne:"金門縣",eng:"KMN"},{cne:"連江縣",eng:"LNN"},{cne:"澎湖縣",eng:"PEH"}]}},f.allcities=[{cne:"臺北市",eng:"TPE"},{cne:"新北市",eng:"TPH"},{cne:"桃園市",eng:"TYC"},{cne:"臺中市",eng:"TXG"},{cne:"臺南市",eng:"TNN"},{cne:"高雄市",eng:"KHH"},{cne:"臺北市",eng:"TPE"},{cne:"新北市",eng:"TPH"},{cne:"基隆市",eng:"KLU"},{cne:"桃園市",eng:"TYC"},{cne:"新竹市",eng:"HSC"},{cne:"新竹縣",eng:"HSH"},{cne:"苗栗縣",eng:"MAL"},{cne:"苗栗市",eng:"MAC"},{cne:"臺中市",eng:"TXG"},{cne:"彰化縣",eng:"CWH"},{cne:"彰化市",eng:"CWS"},{cne:"南投市",eng:"NTC"},{cne:"南投縣",eng:"NTO"},{cne:"雲林縣",eng:"YUN"},{cne:"嘉義縣",eng:"CHY"},{cne:"嘉義市",eng:"CYI"},{cne:"臺南市",eng:"TNN"},{cne:"高雄市",eng:"KHH"},{cne:"屏東縣",eng:"IUH"},{cne:"屏東市",eng:"PTS"},{cne:"宜蘭縣",eng:"ILN"},{cne:"宜蘭市",eng:"ILC"},{cne:"花蓮縣",eng:"HWA"},{cne:"花蓮市",eng:"HWC"},{cne:"臺東市",eng:"TTC"},{cne:"臺東縣",eng:"TTT"},{cne:"金門縣",eng:"KMN"},{cne:"連江縣",eng:"LNN"},{cne:"澎湖縣",eng:"PEH"}];var p=function(){this.tags=["360-cors-upload"],this.categoryId=22,this.videoId="",this.uploadStartTime=0};p.prototype.ready=function(e){this.accessToken=e,this.gapi=gapi,this.authenticated=!0,this.gapi.client.request({path:"/youtube/v3/channels",params:{part:"snippet",mine:!0},callback:function(e){e.error?console.log(e.error.message):($("#channel-name").text(e.items[0].snippet.title),$("#channel-thumbnail").attr("src",e.items[0].snippet.thumbnails.default.url),$(".pre-sign-in").hide(),$(".post-sign-in").show())}.bind(this)}),$("#button").on("click",this.handleUploadClicked.bind(this))},p.prototype.uploadFile=function(e){var t={snippet:{title:$("#title").val(),description:$("#description").text(),tags:this.tags,categoryId:this.categoryId},status:{privacyStatus:$("#privacy-status option:selected").text()}},n=new MediaUploader({baseUrl:"https://www.googleapis.com/upload/youtube/v3/videos",file:e,token:this.accessToken,metadata:t,params:{part:Object.keys(t).join(",")},onError:function(e){var t=e;try{t=JSON.parse(e).error.message}finally{alert(t)}}.bind(this),onProgress:function(e){var t=Date.now(),n=e.loaded,i=e.total,a=(this.uploadStartTime,100*n/i);$("#upload-progress").attr({value:n,max:i}),$("#percent-transferred").text(a),$("#bytes-transferred").text(n),$("#total-bytes").text(i),$(".during-upload").show()}.bind(this),onComplete:function(e){var t=JSON.parse(e);this.videoId=t.id,$("#video-id").text(this.videoId),$(".post-upload").show(),this.pollForVideoStatus()}.bind(this)});this.uploadStartTime=Date.now(),n.upload()},p.prototype.handleUploadClicked=function(){$("#button").attr("disabled",!0),this.uploadFile($("#file").get(0).files[0])},p.prototype.pollForVideoStatus=function(){this.gapi.client.request({path:"/youtube/v3/videos",params:{part:"status,player",id:this.videoId},callback:function(e){if(e.error)console.log(e.error.message),setTimeout(this.pollForVideoStatus.bind(this),6e4);else{var t=e.items[0].status.uploadStatus;switch(t){case"uploaded":$("#post-upload-status").append("<li>Upload status: "+t+"</li>"),setTimeout(this.pollForVideoStatus.bind(this),6e4);break;case"processed":$("#player").append(e.items[0].player.embedHtml),$("#post-upload-status").append("<li>Final status.</li>");break;default:$("#post-upload-status").append("<li>Transcoding failed.</li>")}}}.bind(this)})};var g=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"index",n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];s(this,e),this.NAME=t,this.ifFB=n,this.ifYT=i,this.ifScrollHandle=a}return r(e,[{key:"bind",value:function(){console.log(this.NAME+" binding.....")}},{key:"init",value:function(){if(console.log(this.NAME+" initialing....."),this.ifFB&&console.log("page:"+this.NAME+" add fb ing....."),this.ifYT&&(console.log("page:"+this.NAME+" add youtube....."),this.YT=new t($(".yt").data("id"),"player"),onYouTubeIframeAPIReady=this.YT.onYouTubeIframeAPIReady),this.ifScrollHandle){var e=function(){var e=$(window).scrollTop(),t=$(".navbar .bg-cover"),n=$(".navbar-menu").attr("data-toggle");f.top=e,e>60||"expand"==n?TweenMax.to(t,.5,{opacity:1,ease:Expo.easeOut}):TweenMax.to(t,.5,{opacity:0,ease:Expo.easeOut})};window.onscroll=function(){e()},e()}location.href.indexOf("localhost")>=0&&(this.TEST=!0,console.log("run test mode......")),this.bind()}},{key:"onresize",value:function(e){$(window).resize(e)}}]),e}(),v=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"index",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];s(this,t);var o=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,i,a));return o.TEST=!1,o.init(),o.watchScroll(),o}return u(t,e),r(t,[{key:"init",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this)}},{key:"anim",value:function(){}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){}}]),t}(g)),y=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"resume",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];s(this,t);var o=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,i,a));return o.TEST=!1,o.init(),o.watchScroll(),o.slickTool(),o.updateView(),o}return u(t,e),r(t,[{key:"init",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this)}},{key:"updateView",value:function(){var e=$(".wrapper-header").data("type");$(".nav-resume-all  a").each(function(){$(this).data("type")==e&&$(this).addClass("act")})}},{key:"slickTool",value:function(){$(".nav-resume-all").on("init",function(){console.log("carousel3 has init...."),$(".nav-resume-all .slick-prev").html('<i class="fa fa-arrow-right"></i>'),$(".nav-resume-all .slick-next").html('<i class="fa fa-arrow-right"></i>')}),$(".nav-resume-all").slick({dots:!1,infinite:!1,speed:700,slidesToShow:5,slidesToScroll:1,responsive:[{breakpoint:767,settings:{slidesToShow:4,slidesToScroll:4,infinite:!1}},{breakpoint:567,settings:{slidesToShow:3,slidesToScroll:3,infinite:!1}}]})}},{key:"anim",value:function(){}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){}}]),t}(g)),m=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"county-mayer-area",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];s(this,t);var o=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o}return u(t,e),r(t,[{key:"chkIgContainsHash",value:function(){var e=location.href,t=$.param.fragment(e);return t&&console.log("hash "+t),decodeURIComponent(t)}},{key:"init",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this)}},{key:"datafetch",value:function(e){var t=this;console.log("data fetching...."),""==e&&(e="六都");var n=f.geo[e].cities;t.updateViewUi(e),t.updateView(n)}},{key:"updateViewUi",value:function(e){$(".select-area > a").each(function(){$(this).data("id")==e?$(this).addClass("act"):$(this).removeClass("act")}),f.area=e}},{key:"updateView",value:function(e){var t=this;$(".select-county-blk").html("");for(var n in e)$(".select-county-blk").append('\n                <div class="col-xs-6 col-sm-3"><a class="info" href="/candidates/mayors/'+e[n].cne+"/#"+f.area+'">\n              <p>'+e[n].cne+'</p>\n              <p class="eng">'+e[n].eng+"</p></a></div>\n              ");t.anim()}},{key:"anim",value:function(){console.log("update View...");var e=0,t=30*Math.random(),n=Math.ceil(t);$(".select-county-blk > div ").each(function(){var t=(e+n)%30+1;$(this).find(".info").addClass("bg-light-group-color"+t),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*e,opacity:1,y:0,ease:Back.easeOut}),e++})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){var e=this;$(".select-area > a").click(function(){var t=$(this).data("id");e.datafetch(t)})}}]),t}(g)),b=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"county-mayer",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];s(this,t);var o=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o.anim(),o}return u(t,e),r(t,[{key:"chkIgContainsHash",value:function(){var e=location.href,t=$.param.fragment(e);return t&&(console.log("hash "+t),f.area=t),decodeURIComponent(t)}},{key:"init",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this)}},{key:"datafetch",value:function(e){var t=this;console.log("data fetching...."),""==e&&(e="六都");var n=f.geo[e].cities;t.updateViewUi(e),t.updateView(n),t.updateViewUiCounty(county_global)}},{key:"updateViewUi",value:function(e){$(".select-area > a").each(function(){$(this).data("id")==e?$(this).addClass("act"):$(this).removeClass("act")}),f.area=e}},{key:"updateViewUiCounty",value:function(e){0==e&&(e=$(".select-county a:first").data("id")),$(".select-county  a").each(function(){$(this).data("id")==e?$(this).addClass("act"):$(this).removeClass("act")})}},{key:"updateView",value:function(e){$(".select-county").html("");for(var t in e)$(".select-county").append('\n             <a href="'+prefixUrl_global+e[t].cne+"/#"+f.area+'" data-id="'+e[t].cne+'">'+e[t].cne+"</a>\n              ")}},{key:"anim",value:function(){var e=this;console.log("update View...");var t=0,n=30*Math.random(),i=Math.ceil(n);$(".content-list > .content-item ").each(function(){var e=(t+i)%30+1;$(this).addClass("bg-dark-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++}),e.detailbind()}},{key:"watchScroll",value:function(){}},{key:"detailbind",value:function(){function e(e,t){var n=e.height(),i=e.css("height","auto").height();e.height(n),e.stop().animate({height:i},t)}var t={};$(".content-item").each(function(){var n=$(this).data("id");$(this).find(".content-detail ").css("height",0),t[n]=0,$(this).find(".btn-detail").click(function(){var i=$(this).parent().parent().parent(),a=(i.data("id"),i.find(".content-detail"));0==t[n]?(e(a,500),t[n]=1):(a.animate({height:"0"},500),t[n]=0)})})}},{key:"bind",value:function(){console.log("binding....");var e=this;$(".select-area > a").click(function(){var t=$(this).data("id");""==t&&(t="六都");var n=f.geo[t].cities;e.updateViewUi(t),e.updateView(n),e.updateViewUiCounty(0)})}}]),t}(g)),w=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"county-mayer-area",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];s(this,t);var o=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o}return u(t,e),r(t,[{key:"init",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this)}},{key:"chkIgContainsHash",value:function(){var e=location.href,t=$.param.fragment(e);return t&&console.log("hash "+t),decodeURIComponent(t)}},{key:"datafetch",value:function(){function e(e){f.geo[e]={cities:[]};var n=f.constituencies,i=$.grep(n,function(t){return"高山原住民"==e?t.district.indexOf("山地原住民")>=0:t.district.indexOf(e)>=0}),a=_.groupBy(i,function(e){return e.county});for(var o in a){console.log("norepeatcts ..."+o);var c=t(o);f.geo[e].cities.push({cne:o,eng:c})}}function t(e){var t=f.allcities;return $.grep(t,function(t){return t.cne.indexOf(e)>=0})[0].eng}var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都",i=(arguments.length>1&&void 0!==arguments[1]&&arguments[1],this);year_global&&year_global,$.get(jsonUrl_global,function(t){if(t){f.constituencies=t,e("高山原住民"),e("平地原住民"),""==n&&(n="六都");var a=f.geo[n].cities;i.updateViewUi(n),i.updateView(a,"city")}else alert("出現錯誤，請稍後再試！")},"json")}},{key:"updateViewUi",value:function(e){$(".select-area > a").each(function(){$(this).data("id")==e?$(this).addClass("act"):$(this).removeClass("act")})}},{key:"updateView",value:function(e,t){var n=this;$(".select-county-blk").html("");var i=n.chkIgContainsHash();if("city"==t)for(var a in e)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3"><a class="info" href="/candidates/councilors/'+e[a].cne+"/#"+i+'">\n                  <p>'+e[a].cne+'</p>\n                  <p class="eng">'+e[a].eng+"</p></a>\n                  </div>\n                  ");else for(var o in e)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3">\n                  <a class="info councilmen-area" href="/candidates/councilors/'+e[o].cne+"/#"+i+'">\n                  <p></p>\n                  <p class="eng">01</p>\n                  <div class="area-info">桃源區、那瑪夏區、甲\n                    仙區、六龜區、杉林區\n                    、內門區、旗山區、美\n                    濃區、茂林區 </div>\n                  </a>\n                  \n                  </div>\n                  ');n.anim()}},{key:"anim",value:function(){console.log("update View...");var e=0,t=30*Math.random(),n=Math.ceil(t);$(".select-county-blk > div ").each(function(){var t=(e+n)%30+1;$(this).find(".info").addClass("bg-light-group-color"+t),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*e,opacity:1,y:0,ease:Back.easeOut}),e++})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){var e=this;$(".select-area > a").click(function(){var t=$(this).data("id");e.datafetch(t)})}}]),t}(g)),k=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"councilmen county",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];s(this,t);var o=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,i,a));o.TEST=!1,o.init(),o.watchScroll();var c=o.chkIgContainsHash();return o.datafetch(c),o}return u(t,e),r(t,[{key:"init",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this)}},{key:"chkIgContainsHash",value:function(){var e=location.href,t=$.param.fragment(e);return t&&console.log("hash "+t),decodeURIComponent(t)}},{key:"datafetch",value:function(e,t){function n(e){f.geo[e]={cities:[]};var t=f.constituencies,n=$.grep(t,function(t){return"高山原住民"==e?t.district.indexOf("山地原住民")>=0:t.district.indexOf(e)>=0}),a=_.groupBy(n,function(e){return e.county});for(var o in a){console.log("norepeatcts ..."+o);var c=i(o);f.geo[e].cities.push({cne:o,eng:c})}}function i(e){var t=f.allcities;return $.grep(t,function(t){return t.cne.indexOf(e)>=0})[0].eng}var a=this;!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都";arguments.length>1&&void 0!==arguments[1]&&arguments[1],year_global&&year_global,$.get(jsonUrl_global,function(t){if(t){f.constituencies=t,n("高山原住民"),n("平地原住民"),console.log("area..."+e),console.log("GLOBAL.county..."+f.county),""==e&&(e="六都");var i=f.geo[e].cities;a.updateViewUi(e),a.updateView(i,"city");var o=a.updateViewUiCounty(county_global);a.updateViewCounty(o)}else alert("出現錯誤，請稍後再試！")},"json")}(e,t)}},{key:"updateViewUi",value:function(e){$(".select-area > a").each(function(){$(this).data("id")==e?$(this).addClass("act"):$(this).removeClass("act")}),f.area=e}},{key:"updateViewUiCounty",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return 0==e&&(e=$(".select-county a:first").data("id")),f.county=e,$(".select-county a").each(function(){$(this).data("id")==e?$(this).addClass("act"):$(this).removeClass("act")}),e}},{key:"updateView",value:function(e,t){var n=this;$(".select-county  a").length>=10&&$(".select-county").slick("unslick"),$(".select-county").html("");for(var i in e)$(".select-county").append('\n             <a href="#'+f.area+'" data-id="'+e[i].cne+'">'+e[i].cne+"</a>\n              ");n.bindcounty(),$(".select-county  a").length>=10&&$(".select-county").slick({dots:!1,infinite:!1,speed:700,slidesToShow:10,slidesToScroll:1,responsive:[{breakpoint:1e3,settings:{slidesToShow:6,slidesToScroll:1,infinite:!1}},{breakpoint:567,settings:{slidesToShow:3,slidesToScroll:3,infinite:!1}}]})}},{key:"updateViewCounty",value:function(e){var t=this,n=void 0;if(f.area.indexOf("原住民")<0){var i=f.constituencies;n=$.grep(i,function(t){return t.county.indexOf(e)>=0})}else{var a=f.constituencies,o="高山原住民"==f.area?"山地原住民":f.area;n=$.grep(a,function(t){return t.county.indexOf(e)>=0&&t.district.indexOf(o)>=0})}$(".select-county-blk").html("");for(var c in n)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3">\n                  <a class="info councilmen-area" href="/candidates/councilors/'+n[c].county+"/"+n[c].constituency+"/#"+f.area+'">\n                  <p></p>\n                  <p class="eng">'+n[c].constituency+'</p>\n                  <div class="area-info">'+n[c].district+"</div>\n                  </a>\n                  \n                  </div>\n                  ");t.anim()}},{key:"anim",value:function(){console.log("update View...");var e=0,t=30*Math.random(),n=Math.ceil(t);$(".select-county-blk > div ").each(function(){var t=(e+n)%30+1;$(this).find(".info").addClass("bg-light-group-color"+t),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*e,opacity:1,y:0,ease:Back.easeOut}),e++})}},{key:"watchScroll",value:function(){}},{key:"bindcounty",value:function(){var e=this;$(".select-county > a").off("click").click(function(){var t=$(this).data("id");console.log("id..."+t);var n=e.updateViewUiCounty(t);e.updateViewCounty(n)})}},{key:"bind",value:function(){var e=this;$(".select-area a").click(function(){var t=$(this).data("id");""==t&&(t="六都");var n=f.geo[t].cities;e.updateViewUi(t),e.updateView(n,"city");var i=e.updateViewUiCounty(0);e.updateViewCounty(i)})}}]),t}(g)),T=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"councilmen",i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],a=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];s(this,t);var c=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,i,a,o));c.TEST=!1,c.fb=new n,c.init(),c.watchScroll();var r=c.chkIgContainsHash();return c.datafetch(r),c}return u(t,e),r(t,[{key:"init",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this),new a}},{key:"chkIgContainsHash",value:function(){var e=location.href,t=$.param.fragment(e);return t&&console.log("hash "+t),decodeURIComponent(t)}},{key:"datafetch",value:function(e,t){function n(e){f.geo[e]={cities:[]};var t=f.constituencies,n=$.grep(t,function(t){return"高山原住民"==e?t.district.indexOf("山地原住民")>=0:t.district.indexOf(e)>=0}),a=_.groupBy(n,function(e){return e.county});for(var o in a){console.log("norepeatcts ..."+o);var c=i(o);f.geo[e].cities.push({cne:o,eng:c})}}function i(e){var t=f.allcities;return $.grep(t,function(t){return t.cne.indexOf(e)>=0})[0].eng}
var a=this;!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都";arguments.length>1&&void 0!==arguments[1]&&arguments[1],year_global&&year_global,$.get(jsonUrl_global,function(t){if(t){f.constituencies=t,n("高山原住民"),n("平地原住民"),console.log("area..."+e),console.log("GLOBAL.county..."+f.county),""==e&&(e="六都");var i=f.geo[e].cities;a.updateViewUi(e),a.updateView(i,"city");var o=a.updateViewUiCounty(county_global);a.updateViewCounty(o),a.updateViewUiConstituency(constituency_global)}else alert("出現錯誤，請稍後再試！")},"json")}(e,t)}},{key:"updateViewUi",value:function(e){$(".select-area > a").each(function(){$(this).data("id")==e?$(this).addClass("act"):$(this).removeClass("act")}),f.area=e}},{key:"updateViewUiCounty",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return 0==e&&(e=$(".select-county a:first").data("id")),f.county=e,$(".select-county a").each(function(){$(this).data("id")==e?$(this).addClass("act"):$(this).removeClass("act")}),e}},{key:"updateViewUiConstituency",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;0==e&&(e=$(".select-constituency a:first").data("id")),f.constituency=e,$(".select-constituency a").each(function(){$(this).data("id")==e?$(this).addClass("act"):$(this).removeClass("act")}),this.anim()}},{key:"updateView",value:function(e,t){var n=this;$(".select-county  a").length>=10&&$(".select-county").slick("unslick"),$(".select-county").html("");for(var a in e)$(".select-county").append('\n             <a href="'+prefixUrl_global+e[a].cne+"/#"+f.area+'" data-id="'+e[a].cne+'">'+e[a].cne+"</a>\n              \n              ");n.bindcounty(),i($(".select-county"))}},{key:"updateViewCounty",value:function(e){var t=void 0;if(f.area.indexOf("原住民")<0){var n=f.constituencies;t=$.grep(n,function(t){return t.county.indexOf(e)>=0})}else{var a=f.constituencies,o="高山原住民"==f.area?"山地原住民":f.area;t=$.grep(a,function(t){return t.county.indexOf(e)>=0&&t.district.indexOf(o)>=0})}$(".select-constituency  a").length>=10&&$(".select-constituency").slick("unslick"),$(".select-constituency").html("");for(var c in t){var s=Number(t[c].constituency)<10?"0"+t[c].constituency+"區":t[c].constituency+"區";t[c].district;$(".select-constituency").append('\n                <a href="'+prefixUrl_global+e+"/"+t[c].constituency+"/#"+f.area+'" data-id="'+t[c].constituency+'" data-info="'+t[c].district+'">'+s+"\n                </a>\n                  ")}i($(".select-constituency")),$(".select-constituency a").each(function(){$(this).off("hover").hover(function(){var e=$(this).data("id"),t=$(this).data("info");console.log("hover...."+e),$(".hover-info p").html(""+t),$(".hover-info").show()},function(){$(".hover-info").hide()})})}},{key:"anim",value:function(){var e=this;console.log("update View...");var t=0,n=30*Math.random(),i=Math.ceil(n);$(".content-list > .content-item ").each(function(){var e=(t+i)%30+1;$(this).addClass("bg-dark-group-color"+e),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*t,opacity:1,y:0,ease:Back.easeOut}),t++}),e.detailbind()}},{key:"detailbind",value:function(){function e(e,t){var n=e.height(),i=e.css("height","auto").height();e.height(n),e.stop().animate({height:i},t)}var t={};$(".content-item").each(function(){var n=$(this).data("id");$(this).find(".content-detail ").css("height",0),t[n]=0,$(this).find(".btn-detail").click(function(){var i=$(this).parent().parent().parent(),a=(i.data("id"),i.find(".content-detail"));0==t[n]?(e(a,500),t[n]=1):(a.animate({height:"0"},500),t[n]=0)})})}},{key:"watchScroll",value:function(){}},{key:"bindcounty",value:function(){var e=this;$(".select-county > a").off("click").click(function(){var t=$(this).data("id");console.log("id..."+t);var n=e.updateViewUiCounty(t);e.updateViewCounty(n),e.updateViewUiConstituency(0)})}},{key:"bind",value:function(){var e=this;$(".select-area a").off("click").click(function(){var t=$(this).data("id");""==t&&(t="六都");var n=f.geo[t].cities;e.updateViewUi(t),e.updateView(n,"city");var i=e.updateViewUiCounty(0);e.updateViewCounty(i),e.updateViewUiConstituency(0)})}}]),t}(g)),C=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"seemore",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];s(this,t);var o=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,i,a));o.TEST=!1,o.init(),o.watchScroll();o.chkIgContainsHash();return o}return u(t,e),r(t,[{key:"init",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this),this.anim()}},{key:"chkIgContainsHash",value:function(){var e=location.href,t=$.param.fragment(e);return t&&console.log("hash "+t),decodeURIComponent(t)}},{key:"datafetch",value:function(){function e(e){f.geo[e]={cities:[]};var n=f.constituencies,i=$.grep(n,function(t){return"高山原住民"==e?t.district.indexOf("山地原住民")>=0:t.district.indexOf(e)>=0}),a=_.groupBy(i,function(e){return e.county});for(var o in a){console.log("norepeatcts ..."+o);var c=t(o);f.geo[e].cities.push({cne:o,eng:c})}}function t(e){var t=f.allcities;return $.grep(t,function(t){return t.cne.indexOf(e)>=0})[0].eng}var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"六都",i=(arguments.length>1&&void 0!==arguments[1]&&arguments[1],this);year_global&&year_global,$.get(jsonUrl_global,function(t){if(t){f.constituencies=t,e("高山原住民"),e("平地原住民"),""==n&&(n="六都");var a=f.geo[n].cities;i.updateViewUi(n),i.updateView(a,"city")}else alert("出現錯誤，請稍後再試！")},"json")}},{key:"updateViewUi",value:function(e){$(".select-area > a").each(function(){$(this).data("id")==e?$(this).addClass("act"):$(this).removeClass("act")})}},{key:"updateView",value:function(e,t){var n=this;if($(".select-county-blk").html(""),"city"==t)for(var i in e)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3"><a class="info" href="/candidates/councilors/'+e[i].cne+'">\n                  <p>'+e[i].cne+'</p>\n                  <p class="eng">'+e[i].eng+"</p></a>\n                  </div>\n                  ");else for(var a in e)$(".select-county-blk").append('\n                  <div class="col-xs-6 col-sm-3">\n                  <a class="info councilmen-area" href="/candidates/councilors/'+e[a].cne+'">\n                  <p></p>\n                  <p class="eng">01</p>\n                  <div class="area-info">桃源區、那瑪夏區、甲\n                    仙區、六龜區、杉林區\n                    、內門區、旗山區、美\n                    濃區、茂林區 </div>\n                  </a>\n                  \n                  </div>\n                  ');n.anim()}},{key:"anim",value:function(){console.log("update View...");var e=0,t=30*Math.random(),n=Math.ceil(t);$(".select-county-blk > div ").each(function(){var t=(e+n)%30+1;$(this).find(".info").addClass("bg-light-group-color"+t),TweenMax.fromTo($(this),.7,{opacity:0,y:20},{delay:.5+.05*e,opacity:1,y:0,ease:Back.easeOut}),e++})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){$(".select-county-blk > div ").hover(function(){TweenMax.to($(this).find(".hover-info"),.3,{opacity:1})},function(){TweenMax.to($(this).find(".hover-info"),.3,{opacity:0})})}}]),t}(g)),S=(window.opera?"CSS1Compat"==document.compatMode?$("html"):$("body"):$("html,body"),function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"see more detail",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];s(this,t);var o=d(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n,i,a));return o.TEST=!1,o.init(),o.watchScroll(),o}return u(t,e),r(t,[{key:"init",value:function(){l(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"init",this).call(this),$(".select-opt2").slick({dots:!1,infinite:!1,speed:700,slidesToShow:4,slidesToScroll:1,responsive:[{breakpoint:1e3,settings:{slidesToShow:3,slidesToScroll:1,infinite:!1}},{breakpoint:567,settings:{slidesToShow:2,slidesToScroll:3,infinite:!1}}]})}},{key:"watchScroll",value:function(){}},{key:"bind",value:function(){}}]),t}(g)),O={};O.start=new c}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
